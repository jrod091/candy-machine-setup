#!/usr/bin/env bash
#######################################################################
# Candy-Machine Deploy Script                                         #
# ------------------------------------------------------------------- #
# Author: jrod091                                                     #
# Copyright jrod091, 2021                                             #
#                                                                     #
# Description:                                                        #
# This script sets up a metaplex store and candy machine for batch    #
# minting from scratch.                                               #
#                                                                     #
# NOTE: this script must NOT be run as root!                          #
#######################################################################

if [ `whoami` = root ]; then # exit if running as root
   echo "${red}Script cannot be run as root!${normal}"
   exit 1
fi

## SET COLORS IF TERMINAL SUPPORTS IT
if test -t 1; then # if terminal
   ncolors=$(which tput > /dev/null && tput colors) # supports color
   if test -n "$ncolors" && test $ncolors -ge 8; then
      termcols=$(tput cols)
      bold="$(tput bold)"
      underline="$(tput smul)"
      standout="$(tput smso)"
      normal="$(tput sgr0)"
      black="$(tput setaf 0)"
      red="$(tput setaf 1)"
      green="$(tput setaf 2)"
      yellow="$(tput setaf 3)"
      blue="$(tput setaf 4)"
      magenta="$(tput setaf 5)"
      cyan="$(tput setaf 6)"
      white="$(tput setaf 7)"
      orange="$(tput setaf 166)"
   fi
fi

## VARIABLES
network=''
pubkey=''
current_dir=''
metaplex_dir=''
assets_dir=''
js_dir=''
cm_cli=''
cm_publickey=''
cm_pubkey=''
cm_timestamp=''
cmm_dir=''
env_ex_file=''
env_file=''

## FUNCTIONS
help_print() { # print help text
   cat <<EOF
Usage: candy_machine_setup <[options]>

Options:
   -d, --devnet            set 'devnet' as network
   -h, --help              print command line options
   -m, --mainnet           set 'mainnet' as network
   -n, --newwallet         setup new wallet locally
   -w {ID}, --wallet={ID}  set public wallet key address from Phantom or other source
EOF
}

success_print() { # success print
   echo "${green}${*}${normal}"
}

warn_print() { # warning print
   echo "${orange}${*}${normal}"
}

err_print() { # error print
   echo "${red}${*}${normal}"
}

shutdown() { # reset cursor in case spinner command errors out
    tput cnorm # reset cursor
}
trap shutdown EXIT

cursorBack() { # move cursor back for spinner animation
    echo -en "\033[$1D"
}

spinner() { # spiner animation so user doesn't think script is hung
    local LC_TYPE=C
    local info="$1"
    local pid=$!
    local delay=0.1
    local spin='⣾⣽⣻⢿⡿⣟⣯⣷'
    #local spin='◐◓◑◒'
    local charwidth=1
    printf "$info"

    local i=0
    tput civis # invisible cursor

    while kill -0 $pid 2> /dev/null; do
	    local i=$(((i + $charwidth) % ${#spin}))
	    printf "${green}%s${normal}" "${spin:$i:$charwidth}"
	    
        cursorBack $charwidth
	    sleep $delay
    done

    tput cnorm
    wait $pid
    return $?
}

check_cmd() { # check if command failed
   if [ $1 -ne 0 ]; then
      err_print "Fatal error!"
      exit 13
   fi
}

bad_opt() { # print error to STDOUT and exit with error code '2'
   echo "${red}$*${normal}" >&2
   help_print
   exit 2
}

need_arg() { # flag that no argument was passed with long flag
   if [ -z "$OPTARG" ]; then
      bad_opt "${red}No argument for --$OPT given!${normal}"
      help_print
   fi
}

check_npm_installed() { # check if specified npm package is installed
   echo "Checking to see if [$1] is installed..."
   npm list -g | grep -q $1
}

install_npm_pkg() { # install npm package quietly
   warn_print "[$1] not found, installing..."
   sudo npm install -g $1 &>/dev/null
   check_cmd $?
   success_print "[$1] installed successfully"
}

check_installed() { # check if package is installed
   echo "Checking to see if [$1] is installed..."
   apt -qq list $1 2>/dev/null | grep -qE "(installed|upgradable)"
}

install_pkg() { # install package quietly
   warn_print "[$1] not found, installing..."
   sudo apt-get update -qq
   sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq $1 >/dev/null
   check_cmd $?
   success_print "[$1] installed successfully"
}

string_contains() { # check if substring ($1) in string ($2), case insensitve search
   local _lc=${2,,}
   [ -z "$1" ] || { [ -z "${_lc##*${1,,}*}" ] && [ -n "$2" ] ;} ;
}

## USER INPUT
while getopts ":dhmnw:-:" OPT; do
   if [ "$OPT" = "-" ]; then  # long option support
      OPT="${OPTARG%%=*}"     # extract long option name
      OPTARG="${OPTARG#$OPT}" # extract long option argument (may be empty)
      OPTARG="${OPTARG#=}"    # if long option argument, remove assigning '='
   fi

   case "$OPT" in
      d | devnet )      network='devnet' ;;                 # set devnet
      h | help )        help_print; exit 0 ;;               # print help
      m | mainnet )     network='mainnet-beta' ;;           # set mainnet
      n | newwallet )   pubkey='new' ;;                     # generate new wallet
      w | wallet )      pubkey="${OPTARG}" ;;               # set public wallet key address
      ??* )             bad_opt "Unknown option --$OPT" ;;  # bad long option
      ? )               bad_opt ;;                          # bad short option
   esac
done
shift $((OPTIND-1)) # remove parsed optiosn and args from $@ list

## CHECK REQUIRED FLAGS
if [ "${network}" = "" ]; then
   err_print "Fatal: Solana network not set!"
   warn_print "Pass the [-d] flag for devnet or the [-m] flag for mainnet"
   help_print
   exit 3
fi

if [ "${pubkey}" = "" ]; then
   err_print "Fatal: Wallet adress required!"
   warn_print "Pass the [-n] flag to create a new wallet or the [-w] flag followed by your wallet address"
   help_print
   exit 4
fi

## MAIN SCRIPT
current_dir=$(pwd) # save current working directory
# check if 'nodejs' is setup, install if not
echo "Checking to see if [nodejs] is installed..."
if node --version &>/dev/null; then
   echo "${green}[nodejs] found.${normal}"
else
   if check_installed curl; then
      success_print "[curl] found."
   else
      install_pkg curl
   fi

   curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -

   # install pre-requisites
   if check_installed gcc; then
      success_print "[gcc] found."
   else
      install_pkg gcc
   fi

   if check_installed g++; then
      success_print "[g++] found."
   else
      install_pkg g++
   fi

   if check_installed make; then
      success_print "[make] found."
   else
      install_pkg make
   fi
   
   install_pkg nodejs
fi

# check if 'yarn' is installed, install if not
if check_npm_installed yarn; then
   success_print "[yarn] found."
else
   install_npm_pkg yarn
fi

# check if 'git' is installed, install if not
if check_installed git; then
   success_print "[git] found."
else
   install_pkg git
fi

# clone metaplex repo
echo "cloning [metaplex] repo..."
git clone https://github.com/metaplex-foundation/metaplex.git &>/dev/null
check_cmd $?
success_print "[metaplex] repo cloned successfully."

# check if 'ts-node' installed, install if not
if check_npm_installed ts-node; then
   success_print "[ts-node] found."
else
   install_npm_pkg ts-node
fi

# check if solana is installed, install if not
echo "Checking to see if [solana] installed..."
if solana --version &>/dev/null; then
   success_print "[solana] found."
else
   warn_print "[solana] not found, installing..."
   sh -c "$(curl -sSfL https://release.solana.com/v1.8.0/install)"
   . ~/.profile # source .profile so PATH updates in current session
   success_print "[solana] installed successfully."
fi

solana config set --url https://api.${network}.solana.com >/dev/null # set solana network
check_cmd $?
keyJSON="${HOME}/.config/solana/${network}.json"

if [ "${pubkey}" = "new" ]; then # generate new wallet
   pubkey=$(solana-keygen new --outfile $keyJSON | grep pubkey | cut -d' ' -f2)
   check_cmd $?
else  #import public wallet
   echo "${orange}Note: You will need your recovery phrase to import wallet. This is required by Solana CLI
      and will not be saved by this script nor on the system anywhere. The input is silent as well so no one can
      see the input as you type it in or copy it!${normal}"
   solana-keygen recover 'prompt://?key=0/0' --outfile $keyJSON
   check_cmd $?
fi

solana config set --keypair $keyJSON >/dev/null # set Solana CLI to use wallet
check_cmd $?
success_print "set keypair"

if [ "${network}" = "devnet" ]; then # only airdrop if running on devnet
   solana airdrop 1 >/dev/null #airdrop some SOL
   check_cmd $?
   success_print "airdropped 1 SOL"
fi

metaplex_dir="${current_dir}/metaplex"
assets_dir="${current_dir}/assets"

echo "Creating directory for images..."
mkdir $assets_dir &>/dev/null # create directory for assests
success_print "Directory created successfully."

echo "${orange}**********************************************************************************************************************
Pausing to allow time to upload images and JSON files to [${assets_dir}]. Refer to the README for further
information on properly setting up your images and JSON files.
**********************************************************************************************************************${normal}"
read -r -s -N 1 -p "Press [Enter] to continue..." key

js_dir="${metaplex_dir}/js"
cd $js_dir

echo "" # just adding an extra break in output
echo "Installing node modules..."
yarn install --silent # install required npm modules
check_cmd $?
success_print "Node modules installed successfully."

echo "Building packages..."
yarn build # build metaplex componenets (cli, web, etc)
check_cmd $?
success_print "Packages built successfully."

echo "Preparing packages and binaries..."
yarn bootstrap
check_cmd $?
success_print "Packages and binaries prepared successfully"

cd $metaplex_dir
cm_cli="${js_dir}/packages/cli/src/candy-machine-cli.ts"

echo "Uploading images to candy machine..."
cm_publickey=$(ts-node $cm_cli upload $assets_dir --env ${network} --keypair ${keyJSON} | grep publickey | cut -d' ' -f9)
check_cmd $?
success_print "Image upload successful."

read -p "What would you like the price of the NFTs to be (in SOL): " price

echo "Creating candy machine..."
cm_pubkey=$(ts-node $cm_cli create_candy_machine --env ${network} --keypair ${keyJSON} --price ${price} | grep pubkey | cut -d' ' -f6)
check_cmd $?
success_print "Candy machine created successfully."

start_of_today=`date '+%d %b %Y 00:00:00 %Z'`
echo "Updating candy machine with available minting start date to [${start_of_today}]..."
cm_timestamp=$(ts-node $cm_cli update_candy_machine --keypair ${keyJSON} --date "${start_of_today}" | grep startDate | cut -d' ' -f6)
check_cmd $?
success_print "Date updated successfully."

cd ${current_dir}

echo "Cloning [candy-machine-mint] repo..."
git clone https://github.com/exiled-apes/candy-machine-mint.git &>/dev/null
check_cmd $?
success_print "[candy-machine-mint] cloned successfully."

cmm_dir="${current_dir}/candy-machine-mint"

cd $cmm_dir

echo "Installing node modules..."
yarn install --silent # install required npm modules
check_cmd $?
success_print "Node modules installed successfully."

echo "Building packages..."
yarn build # build metaplex componenets (cli, web, etc)
check_cmd $?
success_print "Packages built successfully."

env_ex_file="${cmm_dir}/.env.example"
env_file="${cmm_dir}/.env"

if [ ! -f $env_file ]; then
   echo "Setting up environment file..."
   mv ${env_ex_file} ${env_file}
   check_cmd $?

   sed -ie "s/REACT_APP_CANDY_MACHINE_CONFIG=__PLACEHOLDER__/REACT_APP_CANDY_MACHINE_CONFIG=${cm_publickey}/" $env_file
   check_cmd $?
   sed -ie "s/REACT_APP_CANDY_MACHINE_ID=__PLACEHOLDER__/REACT_APP_CANDY_MACHINE_ID=${cm_pubkey}/" $env_file
   check_cmd $?
   sed -ie "s/REACT_APP_TREASURY_ADDRESS=__PLACEHOLDER__/REACT_APP_TREASURY_ADDRESS=${pubkey}/" $env_file
   check_cmd $?
   sed -ie "s/REACT_APP_CANDY_START_DATE=__PLACEHOLDER__/REACT_APP_CANDY_START_DATE=${cm_timestamp}/" $env_file
   check_cmd $?
   sed -ie "s/REACT_APP_SOLANA_NETWORK=devnet/REACT_APP_SOLANA_NETWORK=${network}/" $env_file
   check_cmd $?
   sed -ie "s|REACT_APP_SOLANA_RPC_HOST=https://explorer-api.devnet.solana.com|REACT_APP_SOLANA_RPC_HOST=https://explorer-api.${network}.solana.com|" $env_file # use something other than `/` to separate search and replace fields since `/` is in URL
   check_cmd $?
fi
success_print "Environment file successfully setup."


echo "${green}############################################################################################################################

Configuration Complete! You may take the following steps to run the candy machine:

   - upload image/json file combos to [${assets_dir}]
      - be sure the image/json files have the same base file name and are zero
        indexed, such as {0.png, 0.json}, {1.png, 1.json}, ... , {N.png, N.json}
   - if on devnet, you may run `solana airdrop N` to add money to your wallet for
     minting, where `N` is a number >= 1 for the number of SOL to drop.
   - cd to [${cmm_dir}] and then run `yarn start` to test candy machine
   ############################################################################################################################${normal}"

exit 0 # normal exit